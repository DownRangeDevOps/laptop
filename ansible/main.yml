---
- name: Setup MacOS Development System
  hosts: local

  vars_files:
    "{{ playbook_dir }}/config.default.yml"

  pre_tasks:
    - name: Always run
      block:

      - name: Checking your password, if this hangs, it's wrong (CTRL+C to quit)
        ansible.builtin.command: "echo success"
        changed_when: False
        become: True

      - name: Include custom config
        include_vars: "{{ item }}"
        with_fileglob:
          - "{{ playbook_dir }}/config.yml"

      tags:
        - always

  roles:
    - role: elliotweiser.osx-command-line-tools
      when: enable_xcode | bool
      tags:
        - roles
        - xcode

    - role: homebrew
      when: enable_homebrew | bool
      tags:
        - roles
        - homebrew

    - role: geerlingguy.mac.dock
      when: enable_dock | bool
      vars:
        dockitems_persist: "{{ dockitems_add }}"
      tags:
        - roles
        - dock

  tasks:
    # system
    - name: Ensure the path to the desired login shell is added to /etc/shells
      ansible.builtin.lineinfile:
        backup: True
        line: "{{ user_login_shell }}"
        path: "/etc/shells"
        regexp: "^{{ user_login_shell }}$"
      become: True

    - name: Ensure the user's desired login shell is set
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        shell: "{{ user_login_shell }}"
      become: True

    # goenv
    - name: Ensure the desired Golang version is installed and globally set
      ansible.builtin.command: "{{ homebrew_bin_path }}/goenv install --skip-existing {{ goenv_global_version }}"
      register: results
      changed_when: results.stdout != ""
      tags:
        - goenv
        - languages

    - name: Get latest goenv installed version
      ansible.builtin.shell: "{{ homebrew_bin_path }}/goenv versions | grep '^\\*' | cut -d' ' -f2"
      register: goenv_versions_results
      when: goenv_global_version == "latest"
      changed_when: False
      tags:
        - always

    - name: Set the goenv_latest version variable
      set_fact:
        goenv_global_version: "{{ goenv_versions_results.stdout }}"
      when: goenv_global_version == "latest"
      changed_when: False
      tags:
        - always

    - name: Ensure the desired goenv versions is globally set
      ansible.builtin.command: "{{ homebrew_bin_path }}/goenv global {{ goenv_global_version }}"
      changed_when: False

    # luaver
    - name: Ensure luaver is initialized
      ansible.builtin.shell: "source {{ homebrew_bin_path }}/luaver"
      changed_when: False
      tags:
        - lua
        - languages

    - name: Ensure the desired Lua version is installed and globally set
      ansible.builtin.command: "{{ homebrew_bin_path }}/luaver {{ item }}"
      loop:
        - "install {{ luaver_global_version }}"
        - "set-default {{ luaver_global_version }}"
      tags:
        - lua
        - languages

    # pyenv
    - name: Query pyenv for the latest known Python 3 version
      ansible.builtin.command: "{{ homebrew_bin_path }}/pyenv latest --known 3"
      register: pyenv_latest_results
      when: pyenv_global_version == "latest"
      changed_when: False
      tags:
        - always

    - name: Set the latest known Python version
      set_fact:
        pyenv_global_version: "{{ pyenv_latest_results.stdout }}"
      when: pyenv_global_version == "latest"
      tags:
        - always

    - name: Ensure the desired Python version is installed and globally set
      ansible.builtin.command: "{{ homebrew_bin_path }}/pyenv {{ item }}"
      loop:
        - "install --skip-existing {{ pyenv_global_version }}"
        - "global {{ pyenv_global_version }}"
      tags:
        - python
        - languages

    # n
    - name: Ensure the n directory is present and owned by the current user
      ansible.builtin.file:
        group: "{{ ansible_user_gid }}"
        mode: "0754"
        owner: "{{ ansible_user_id }}"
        path: "{{ n_prefix }}"
        state: directory
      become: True

    - name: Ensure the desired NodeJS version is installed and globally set
      ansible.builtin.command: "{{ homebrew_bin_path }}/n {{ n_global_version }}"
      environment:
        N_PREFIX: "{{ n_prefix }}"
      tags:
        - nodejs
        - languages

      # rbenv
    - name: Ensure the desired Ruby version is installed and globally set
      ansible.builtin.command: "{{ homebrew_bin_path }}/rbenv {{ item }}"
      loop:
        - "install --skip-existing {{ rbenv_global_version }}"
        - "global {{ rbenv_global_version }}"
      tags:
        - ruby
        - languages

    # rustup-init
    - name: Ensure the desired Rust version is installed
      ansible.builtin.command: >-
        {{ homebrew_bin_path }}/rustup-init
        --quiet
        --default-host x86_64-apple-darwin
        --default-toolchain stable
        --profile default
        --no-modify-path
        -y

    # Clone & setup dotfiles
    - name: dotfiles block
      block:

      - name: Check for the presence of the dotfiles repository
        ansible.builtin.stat:
          path: "{{ dotfiles_git_dest }}"
        register: dotfiles

      - name: Clone the dotfiles repository
        ansible.builtin.git:
          accept_newhostkey: "{{ dotfiles_git_accept_new_hostkey }}"
          dest: "{{ dotfiles_git_dest }}"
          executable: "{{ homebrew_bin_path }}/git"
          repo: "{{ dotfiles_git_url }}"
        when: not dotfiles.stat.exists and dotfiles_git_url != ""

      - name: Ensure dotfiles setup is executable
        ansible.builtin.file:
          mode: "u+x"
          path: "{{ dotfiles_git_dest }}/{{ dotfiles_setup_executable }}"
          state: file
        when: dotfiles_setup_executable != "" and dotfiles.stat.exists

      - name: Run dotfiles setup executable
        command: "{{ dotfiles_git_dest }}/{{ dotfiles_setup_executable }}"
        when: dotfiles_setup_executable != "" and dotfiles.stat.exists

      when: enable_dotfiles | bool
      tags:
        - dotfiles

    # Git configuration
    - name: Set global git configuration values
      ansible.builtin.git_config:
        name: "{{ item.name }}"
        scope: global
        value: "{{ item.value }}"
      loop:
        - name: user.name
          value: "{{ git_name }}"
        - name: user.email
          value: "{{ git_email }}"
      when: enable_git_config | bool and item.value != ""
      tags:
        - git-config

      # pip global packages
    - name: Query pyenv for the path to the current pip version
      command: "{{ homebrew_bin_path }}/pyenv which pip"
      register: pyenv_which_pip_results
      changed_when: False
      tags:
        - always
        - pip

    - name: Set pip path variable
      set_fact:
        pip_bin_path: "{{ pyenv_which_pip_results.stdout }}"
      when: pyenv_which_pip_results.stdout != ""
      changed_when: False
      tags:
        - always
        - pip

    - name: Ensure pip python packages are installed
      ansible.builtin.pip:
        executable: "{{ pip_bin_path }}"
        name: "{{ pip_required_packages }}"
      tags:
        - pip

      # pipx packages
    - name: Ensure pipx python packages are installed
      community.general.pipx:
        executable: "{{ homebrew_bin_path }}/pipx"
        name: "{{ item }}"
        install_deps: True
      loop: "{{ pipx_required_packages }}"
      when: enable_pipx | bool
      tags:
        - pipx
        - packages

      # npm packages
    - name: Query the installed NodeJS versions from n
      ansible.builtin.command: "{{ homebrew_bin_path }}/n ls"
      register: n_ls_results
      environment:
        N_PREFIX: "{{ n_prefix }}"
      changed_when: False
      check_mode: False
      tags:
        - always

    - name: Query the path to the latest installed NodeJS version from n
      ansible.builtin.command: "{{ homebrew_bin_path }}/n which {{ n_ls_results.stdout_lines | last }}"
      register: n_which_results
      environment:
        N_PREFIX: "{{ n_prefix }}"
      changed_when: False
      tags:
        - always

    - name: Set path to latest NodeJS version managed by n
      set_fact:
        n_node_bin_path: "{{ n_which_results.stdout | regex_replace('node$') }}"
      changed_when: False
      tags:
        - always

    - name: Ensure NodeJS npm packages are installed
      ansible.builtin.npm:
        executable: "{{ n_node_bin_path }}/npm"
        global: True
        name: item
      loop: "{{ npm_required_packages }}"
      when: n_node_bin_path != ""
      tags:
        - npm
        - packages

    # Ruby gems
    - name: Query the path to the rbenv gem executable
      ansible.builtin.command: "{{ homebrew_bin_path }}/rbenv which gem"
      register: rbenv_which_gem_results
      changed_when: False
      tags:
        - always

    - name: Ensure Ruby gems are installed
      ansible.builtin.gem:
        executable: "{{ rbenv_which_gem_results.stdout }}"
        name: "{{ item }}"
      loop: "{{ gem_required_packages }}"
      tags:
        - gem
        - packages
