#!/usr/bin/env bash
set -uo pipefail;

# defaults
PLAYBOOK_DIR="ansible"
DEPS=(pyenv pipx gnu-sed grep)
ANSIBLE_ARGS=()

# If help is displayed, ignore everything else
if [[ "$*" =~ "--help" || "$*" =~ "-h" ]]; then
    printf "%s" \
        "USAGE: setup [-h|--help]" \
        "" \
        "SYNOPSIS:" \
        "   Setup a MacOS development system using Homebrew and Ansible." \
        "" \
        "CONFIG:" \
        "   Copy the default configuration file from \`${PLAYBOOK_DIR}/group_vars/defaults.yml\`" \
        "   to \`${PLAYBOOK_DIR}/config.yml\` and adjust it as needed." \
        "" \
        "OPTIONS:" \
        "   -h, --help          Show this message." \
        "   --check             Passed to Ansible." \
        "   --tags <tag>        Passed to Ansible." \
        "   --skip-tags <tag>   Passed to Ansible."
    exit 0
fi

# parse options/args
if [[ $# -gt 0 ]]; then
    while [[ $# -gt 0 ]]; do
        case $1 in
            --check)
                ANSIBLE_ARGS+=("--check")
                shift
                ;;
            --tags)
                ANSIBLE_ARGS+=("--tags" "$2")
                shift
                shift
                ;;
            --skip-tags)
                ANSIBLE_ARGS+=("--skip-tags" "$2")
                shift
                shift
                ;;
            --*)
                printf "%s\n" "Unknown option: $1"
                exit 1
                ;;
        esac
    done
fi

# Install Homebrew
if [[ "$(uname -m)" == "x86_64" ]]; then
    BREW_PREFIX="/usr/local"
else
    BREW_PREFIX="/opt/homebrew"
fi

if ! command -v "${BREW_PREFIX}/bin/brew" > /dev/null; then
    printf "%b\n" "$(tput bold)$(tput setaf 4)==> $(tput sgr0)$(tput bold)Installing Homebrew...$(tput sgr0)" ""
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

PATH="${BREW_PREFIX}/bin:${PATH}"

# Install dependencies
printf "%b\n" "$(tput bold)$(tput setaf 4)==> $(tput sgr0)$(tput bold)Installing setup dependencies...$(tput sgr0)" ""
"${BREW_PREFIX}/bin/brew" install "${DEPS[@]}" 2> /dev/null

GNU_SED_BIN="${BREW_PREFIX}/opt/gnu-sed/libexec/gnubin/sed"
GNU_GREP_BIN="${BREW_PREFIX}/opt/grep/libexec/gnubin/grep"
PIPX_BIN="${BREW_PREFIX}/bin/pipx"

# Install pyenv managed Python
PYENV_BIN="${BREW_PREFIX}/bin/pyenv"
PYTHON_LATEST=$(${PYENV_BIN} latest --known 3)

printf "%b\n" "$(tput bold)$(tput setaf 4)==> $(tput sgr0)$(tput bold)Installing Python ${PYTHON_LATEST}...$(tput sgr0)" ""
"${PYENV_BIN}" install --skip-existing "${PYTHON_LATEST}"
"${PYENV_BIN}" global "${PYTHON_LATEST}"

# Install Ansible
PIPX_INSTALLED_PACKAGES=$("${PIPX_BIN}" list --short)

if [[ ! ${PIPX_INSTALLED_PACKAGES} =~ "ansible" ]]; then
    printf "%b\n" "$(tput bold)$(tput setaf 4)==> $(tput sgr0)$(tput bold)Installing Ansible...$(tput sgr0)" ""
    "${PIPX_BIN}" install --include-deps ansible
fi

# Install Ansible roles
printf "%b\n" "$(tput bold)$(tput setaf 4)==> $(tput sgr0)$(tput bold)Installing playbook role dependencies...$(tput sgr0)" ""
PIPX_PREFIX=$(${PIPX_BIN} environment | "${GNU_GREP_BIN}" "^PIPX_BIN_DIR" | "${GNU_SED_BIN}" "s/.*=//")
PATH="${PIPX_PREFIX}:${PATH}"
(
    cd "${PLAYBOOK_DIR}" || exit 1
    "${PIPX_PREFIX}/ansible-galaxy" collection install --ignore-errors --requirements-file requirements.yml
    "${PIPX_PREFIX}/ansible-galaxy" role install --ignore-errors --roles-path galaxy --role-file requirements.yml

    # Run the Ansible playbook
    printf "\n%b\n" "$(tput bold)$(tput setaf 4)==> $(tput sgr0)$(tput bold)Running playbook, you will be prompted for your password...$(tput sgr0)" ""
    if [[ -n ${ANSIBLE_ARGS[*]-} ]]; then
        "${PIPX_PREFIX}/ansible-playbook" --ask-become-pass "${ANSIBLE_ARGS[@]}" main.yml
    else
        "${PIPX_PREFIX}/ansible-playbook" --ask-become-pass main.yml
    fi
)

# vi: ft=sh
